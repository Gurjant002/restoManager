"""
Django settings for restoManager project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!e0h&6kud$@4++fg258hr1+zderq5l1^24z)@ik_z8(dmseq0%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.1.14", "localhost", "127.0.0.1"]
# ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'channels_redis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'restoManager_app',
    'cocina_app',
    'camarero_app',
    'login',
    'restoManager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'restoManager.urls'
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'restoManager/templates'),'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'restoManager.wsgi.application'
ASGI_APPLICATION = 'restoManager.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'restomanager',
        'USER': 'restoManagerSql',
        'PASSWORD': 'restoManager245',
        'HOST': 'localhost',
        'PORT': '3306',

    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es-ES'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
import os
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['warning_filter', 'error_filter', 'info_filter'],
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'restoManager.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'restoManager_app': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
        'cocina_app': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
        'camarero_app': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
        'restomanager': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
        'login': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
    },
    'filters': {
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'error_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
    },
    'filters': {
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'error_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
    },
    'filters': {
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'error_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
    },
    'filters': {
        'warning_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.WARNING,
        },
        'error_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.ERROR,
        },
        'info_filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda r: r.levelno == logging.INFO,
        },
    },
}


